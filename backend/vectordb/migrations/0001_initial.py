# Generated by Django 5.2.6 on 2025-10-05 08:07

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('rag_app', '0006_alter_project_persist_directory'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ModuleVectorStore',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('collection_name', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(choices=[('empty', 'Empty'), ('indexing', 'Indexing'), ('ready', 'Ready'), ('error', 'Error')], default='empty', max_length=20)),
                ('embedding_model', models.CharField(default='sentence-transformers/all-MiniLM-L6-v2', max_length=255)),
                ('embedding_dimension', models.IntegerField(default=384)),
                ('chunk_size', models.IntegerField(default=1000)),
                ('chunk_overlap', models.IntegerField(default=200)),
                ('document_count', models.IntegerField(default=0)),
                ('total_chunks', models.IntegerField(default=0)),
                ('total_tokens', models.BigIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_indexed_at', models.DateTimeField(blank=True, null=True)),
                ('config', models.JSONField(blank=True, default=dict)),
                ('module', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vector_store', to='rag_app.module')),
            ],
            options={
                'db_table': 'vectordb_module_store',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QueryLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('query_text', models.TextField()),
                ('query_hash', models.CharField(db_index=True, max_length=64)),
                ('response_text', models.TextField(blank=True)),
                ('retrieved_chunks', models.JSONField(default=list)),
                ('similarity_scores', models.JSONField(default=list)),
                ('retrieval_time_ms', models.IntegerField(default=0)),
                ('generation_time_ms', models.IntegerField(default=0)),
                ('total_time_ms', models.IntegerField(default=0)),
                ('user_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('user_feedback', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='query_logs', to='rag_app.module')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='query_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'vectordb_query_log',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='vectordb_qu_user_id_529bec_idx'), models.Index(fields=['module', '-created_at'], name='vectordb_qu_module__f842f5_idx'), models.Index(fields=['query_hash'], name='vectordb_qu_query_h_223c36_idx')],
            },
        ),
        migrations.CreateModel(
            name='VectorDBTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_id', models.CharField(db_index=True, max_length=255, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('current_step', models.CharField(blank=True, max_length=255)),
                ('current_document', models.CharField(blank=True, max_length=255)),
                ('total_documents', models.IntegerField(default=0)),
                ('processed_documents', models.IntegerField(default=0)),
                ('successful_documents', models.IntegerField(default=0)),
                ('failed_documents', models.IntegerField(default=0)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('force_recreate', models.BooleanField(default=False)),
                ('chunk_size', models.IntegerField(default=1000)),
                ('chunk_overlap', models.IntegerField(default=200)),
                ('embedding_model', models.CharField(blank=True, max_length=255)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vector_tasks', to=settings.AUTH_USER_MODEL)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vector_tasks', to='rag_app.module')),
            ],
            options={
                'db_table': 'vectordb_task',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['task_id'], name='vectordb_ta_task_id_44dfef_idx'), models.Index(fields=['status', 'created_at'], name='vectordb_ta_status_03e49e_idx'), models.Index(fields=['module', '-created_at'], name='vectordb_ta_module__72a2a5_idx')],
            },
        ),
    ]
